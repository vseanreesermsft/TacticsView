@inject GitHubQueryService IssuesService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<UIStrings> L

@if (Repositories == null)
{
    <p><em>@L["SearchingPlaceholder"]</em></p>
    <img src="images/octocat-spinner-128.gif" width="64" height="64" alt="Searching GitHub" aria-hidden="true" />
}
else
{
    @if (Repositories.Count == 0)
    {
        <div>@Motivator.GetMotivator()</div>
    }
    else
    {
        <RadzenTabs @bind-SelectedIndex="@SelectedIndex">
            <Tabs>
                @foreach (var repo in Repositories)
                {
                    <RadzenTabsItem Selected="@IsTabSelected(repo.Name)" style="--rz-tabs-tab-selected-color: #fff;">
                        <Template Context="tab">
                            @repo.Name&nbsp;@RenderCount(repo.Issues.Where(issue => IsVisible(issue)).Count(), tab)
                        </Template>
                        <ChildContent>
                            <div class="form-group">
                                <input class="form-control" type="text" placeholder="Filter..." @bind="Filter" @bind:event="oninput">
                            </div>
                            <table class="table table-striped table-hover">
                                <thead class="thead-light">
                                    <tr>
                                        <th scope="col" width="90" class="sticky-top">ID</th>
                                        <th scope="col" class="sticky-top">@L["TitleHeader"]</th>
                                        <th scope="col" width="80" class="sticky-top">@L["MilestoneHeader"]</th>
                                    </tr>
                                </thead>
                                <tbody id="dataTable">
                                    <Virtualize Context="item" TItem="SimpleIssue" Items="@repo.Issues.Where(issue=>IsVisible(issue)).ToList()">
                                        <tr>
                                            <th scope="row" nowrap>
                                                <GitMergeVisual State="@item.State.StringValue" />
                                                <a target="_blank" href="@item.PullRequest.HtmlUrl">@item.Number</a>
                                            </th>
                                            <td>
                                                <a class="gh-issue-title" href="@item.PullRequest.HtmlUrl" target="_blank">@item.Title</a>
                                                <span>
                                                    @foreach (var label in item.Labels)
                                                    {
                                                        <span class="gh-label" style="color:@TacticView.Utilitiy.Colors.GetReadableForeColorAsString(label.Color);background-color:#@label.Color">@label.Name.Emojify()</span>
                                                    }
                                                </span>
                                                <div class="gh-details-cell">
                                                    @item.Org/@item.Repo#@item.Number @item.CreatedAt.Humanize() by <span class="ml-2 mr-1 oi oi-person text-muted"></span>@item.User.Login

                                                    @if (item.Milestone != null)
                                                    {
                                                        <span class="ml-2 mr-1 oi oi-signpost text-muted" aria-hidden="true" title="milestone"></span>@item.Milestone.Title
                                                    }
                                                </div>
                                            </td>
                                            <td>@item.Milestone?.Title</td>
                                        </tr>
                                    </Virtualize>
                                </tbody>
                            </table>

                        </ChildContent>
                    </RadzenTabsItem>
                }
            </Tabs>
        </RadzenTabs>
    }
    <br/>
    <span class="ml-2 mr-1 oi oi-reload" @onclick="ForceRefreshAsync" title="Refresh cache" style="cursor:pointer"></span><span>Cached data: @CacheDate.Humanize()</span>
}
@code {
    [Parameter] public string Label { get; set; }

    [Parameter] public bool IsOpenOnly { get; set; } = true;

    [Parameter] public bool EnableApproval { get; set; } = false;

    public List<TriageRepository> Repositories { get; set; }

    public DateTimeOffset CacheDate;

    public string Filter { get; set; }

    public int SelectedIndex { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadFromCacheAsync();
    }

    public MarkupString RenderCount(int count, RadzenTabsItem tab)
    {
        var shade = tab.IsSelected ? "light" : "dark";
        var badge = $"<span class=\"badge badge-{shade}\">{count.ToString()}</span>";
        return new MarkupString(badge);
    }

    public bool IsTabSelected(string name)
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        QueryHelpers.ParseQuery(uri.Query).TryGetValue("repo", out var q);

        return (q.ToString().ToLowerInvariant() == name.ToLowerInvariant());
    }

    public async Task ForceRefreshAsync()
    {
        Repositories = null;
        await IssuesService.GetReposAndIssuesAsync(Label, IsOpenOnly);
        await LoadFromCacheAsync();
    }

    public async Task LoadFromCacheAsync()
    {
        var tuple = await IssuesService.GetCachedReposAndIssuesAsync(Label, IsOpenOnly);
        Repositories = tuple.Item1;
        CacheDate = tuple.Item2;

        //StateHasChanged();
    }

    public bool IsVisible(SimpleIssue issue)
    {
        if (string.IsNullOrEmpty(Filter))
            return true;

        if (Filter.ToLowerInvariant() == "s:open")
        {
            if (issue.State.StringValue == "open") return true;
        }

        if (Filter.ToLowerInvariant().StartsWith("m:"))
        {
            if (issue.Milestone != null && issue.Milestone.Title != null)
            {
                if (issue.Milestone.Title.Contains(Filter.Replace("m:", string.Empty), StringComparison.OrdinalIgnoreCase))
                    return true;
            }
        }

        if (issue.Title.Contains(Filter, StringComparison.OrdinalIgnoreCase))
            return true;

        if (issue.Milestone != null && issue.Milestone.Title != null)
        {
            if (issue.Milestone.Title.Contains(Filter, StringComparison.OrdinalIgnoreCase))
                return true;
        }

        if (issue.Number.ToString().Contains(Filter, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }
}
